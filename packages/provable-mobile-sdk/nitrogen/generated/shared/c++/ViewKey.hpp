///
/// ViewKey.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `Address` to properly resolve imports.
namespace margelo::nitro::provable { struct Address; }

#include <string>
#include <NitroModules/Promise.hpp>
#include <functional>
#include "Address.hpp"

namespace margelo::nitro::provable {

  /**
   * A struct which can be represented as a JavaScript object (ViewKey).
   */
  struct ViewKey {
  public:
    std::function<std::shared_ptr<Promise<std::string>>()> toString     SWIFT_PRIVATE;
    std::function<std::shared_ptr<Promise<Address>>()> toAddress     SWIFT_PRIVATE;

  public:
    ViewKey() = default;
    explicit ViewKey(std::function<std::shared_ptr<Promise<std::string>>()> toString, std::function<std::shared_ptr<Promise<Address>>()> toAddress): toString(toString), toAddress(toAddress) {}
  };

} // namespace margelo::nitro::provable

namespace margelo::nitro {

  // C++ ViewKey <> JS ViewKey (object)
  template <>
  struct JSIConverter<margelo::nitro::provable::ViewKey> final {
    static inline margelo::nitro::provable::ViewKey fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::provable::ViewKey(
        JSIConverter<std::function<std::shared_ptr<Promise<std::string>>()>>::fromJSI(runtime, obj.getProperty(runtime, "toString")),
        JSIConverter<std::function<std::shared_ptr<Promise<margelo::nitro::provable::Address>>()>>::fromJSI(runtime, obj.getProperty(runtime, "toAddress"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::provable::ViewKey& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "toString", JSIConverter<std::function<std::shared_ptr<Promise<std::string>>()>>::toJSI(runtime, arg.toString));
      obj.setProperty(runtime, "toAddress", JSIConverter<std::function<std::shared_ptr<Promise<margelo::nitro::provable::Address>>()>>::toJSI(runtime, arg.toAddress));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::function<std::shared_ptr<Promise<std::string>>()>>::canConvert(runtime, obj.getProperty(runtime, "toString"))) return false;
      if (!JSIConverter<std::function<std::shared_ptr<Promise<margelo::nitro::provable::Address>>()>>::canConvert(runtime, obj.getProperty(runtime, "toAddress"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
