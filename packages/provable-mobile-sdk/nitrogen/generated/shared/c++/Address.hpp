///
/// Address.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }

#include <string>
#include <NitroModules/Promise.hpp>
#include <functional>
#include <NitroModules/ArrayBuffer.hpp>

namespace margelo::nitro::provable {

  /**
   * A struct which can be represented as a JavaScript object (Address).
   */
  struct Address {
  public:
    std::function<std::shared_ptr<Promise<std::string>>()> toString     SWIFT_PRIVATE;
    std::function<std::shared_ptr<Promise<bool>>(const std::shared_ptr<ArrayBuffer>& /* signature */, const std::shared_ptr<ArrayBuffer>& /* message */)> verify     SWIFT_PRIVATE;

  public:
    Address() = default;
    explicit Address(std::function<std::shared_ptr<Promise<std::string>>()> toString, std::function<std::shared_ptr<Promise<bool>>(const std::shared_ptr<ArrayBuffer>& /* signature */, const std::shared_ptr<ArrayBuffer>& /* message */)> verify): toString(toString), verify(verify) {}
  };

} // namespace margelo::nitro::provable

namespace margelo::nitro {

  // C++ Address <> JS Address (object)
  template <>
  struct JSIConverter<margelo::nitro::provable::Address> final {
    static inline margelo::nitro::provable::Address fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::provable::Address(
        JSIConverter<std::function<std::shared_ptr<Promise<std::string>>()>>::fromJSI(runtime, obj.getProperty(runtime, "toString")),
        JSIConverter<std::function<std::shared_ptr<Promise<bool>>(const std::shared_ptr<ArrayBuffer>&, const std::shared_ptr<ArrayBuffer>&)>>::fromJSI(runtime, obj.getProperty(runtime, "verify"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::provable::Address& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "toString", JSIConverter<std::function<std::shared_ptr<Promise<std::string>>()>>::toJSI(runtime, arg.toString));
      obj.setProperty(runtime, "verify", JSIConverter<std::function<std::shared_ptr<Promise<bool>>(const std::shared_ptr<ArrayBuffer>&, const std::shared_ptr<ArrayBuffer>&)>>::toJSI(runtime, arg.verify));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::function<std::shared_ptr<Promise<std::string>>()>>::canConvert(runtime, obj.getProperty(runtime, "toString"))) return false;
      if (!JSIConverter<std::function<std::shared_ptr<Promise<bool>>(const std::shared_ptr<ArrayBuffer>&, const std::shared_ptr<ArrayBuffer>&)>>::canConvert(runtime, obj.getProperty(runtime, "verify"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
