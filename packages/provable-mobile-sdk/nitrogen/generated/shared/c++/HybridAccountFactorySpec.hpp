///
/// HybridAccountFactorySpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `HybridPrivateKeySpec` to properly resolve imports.
namespace margelo::nitro::provable { class HybridPrivateKeySpec; }
// Forward declaration of `HybridAddressSpec` to properly resolve imports.
namespace margelo::nitro::provable { class HybridAddressSpec; }
// Forward declaration of `HybridViewKeySpec` to properly resolve imports.
namespace margelo::nitro::provable { class HybridViewKeySpec; }

#include <memory>
#include "HybridPrivateKeySpec.hpp"
#include <string>
#include "HybridAddressSpec.hpp"
#include "HybridViewKeySpec.hpp"

namespace margelo::nitro::provable {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `AccountFactory`
   * Inherit this class to create instances of `HybridAccountFactorySpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridAccountFactory: public HybridAccountFactorySpec {
   * public:
   *   HybridAccountFactory(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridAccountFactorySpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridAccountFactorySpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridAccountFactorySpec() override = default;

    public:
      // Properties
      

    public:
      // Methods
      virtual std::shared_ptr<HybridPrivateKeySpec> createPrivateKey() = 0;
      virtual std::shared_ptr<HybridPrivateKeySpec> privateKeyFromString(const std::string& privateKey) = 0;
      virtual std::shared_ptr<HybridAddressSpec> addressFromString(const std::string& address) = 0;
      virtual std::shared_ptr<HybridViewKeySpec> viewKeyFromString(const std::string& viewKey) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "AccountFactory";
  };

} // namespace margelo::nitro::provable
