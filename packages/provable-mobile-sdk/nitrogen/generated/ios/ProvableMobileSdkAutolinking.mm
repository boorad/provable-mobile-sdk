///
/// ProvableMobileSdkAutolinking.mm
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#import <Foundation/Foundation.h>
#import <NitroModules/HybridObjectRegistry.hpp>

#import <type_traits>

#include "HybridPrivateKey.hpp"
#include "HybridAddress.hpp"
#include "HybridViewKey.hpp"
#include "HybridAccountFactory.hpp"

@interface ProvableMobileSdkAutolinking : NSObject
@end

@implementation ProvableMobileSdkAutolinking

+ (void) load {
  using namespace margelo::nitro;
  using namespace margelo::nitro::provable;

  HybridObjectRegistry::registerHybridObjectConstructor(
    "PrivateKey",
    []() -> std::shared_ptr<HybridObject> {
      static_assert(std::is_default_constructible_v<HybridPrivateKey>,
                    "The HybridObject \"HybridPrivateKey\" is not default-constructible! "
                    "Create a public constructor that takes zero arguments to be able to autolink this HybridObject.");
      return std::make_shared<HybridPrivateKey>();
    }
  );
  HybridObjectRegistry::registerHybridObjectConstructor(
    "Address",
    []() -> std::shared_ptr<HybridObject> {
      static_assert(std::is_default_constructible_v<HybridAddress>,
                    "The HybridObject \"HybridAddress\" is not default-constructible! "
                    "Create a public constructor that takes zero arguments to be able to autolink this HybridObject.");
      return std::make_shared<HybridAddress>();
    }
  );
  HybridObjectRegistry::registerHybridObjectConstructor(
    "ViewKey",
    []() -> std::shared_ptr<HybridObject> {
      static_assert(std::is_default_constructible_v<HybridViewKey>,
                    "The HybridObject \"HybridViewKey\" is not default-constructible! "
                    "Create a public constructor that takes zero arguments to be able to autolink this HybridObject.");
      return std::make_shared<HybridViewKey>();
    }
  );
  HybridObjectRegistry::registerHybridObjectConstructor(
    "AccountFactory",
    []() -> std::shared_ptr<HybridObject> {
      static_assert(std::is_default_constructible_v<HybridAccountFactory>,
                    "The HybridObject \"HybridAccountFactory\" is not default-constructible! "
                    "Create a public constructor that takes zero arguments to be able to autolink this HybridObject.");
      return std::make_shared<HybridAccountFactory>();
    }
  );
}

@end
